#!/usr/bin/python3

import shutil
import tempfile
import subprocess
import argparse
import os

parser = argparse.ArgumentParser()
parser.add_argument("src_file", help='file to compile and execute')
parser.add_argument(
    "input_file", help='file from which to redirect program output')
parser.add_argument(
    "output_file", help='file to write program output')
parser.add_argument("log_file", nargs='?', help='file to write trace log')
parser.add_argument("-v", "--verbose", action="store_true")
parser.add_argument("--keep_tmp", action="store_true")
args = parser.parse_args()

args.input_file = os.path.abspath(args.input_file)
args.output_file = os.path.abspath(args.output_file)
if args.log_file is not None:
    args.log_file = os.path.abspath(args.log_file)

src_dir = os.path.abspath(os.path.dirname(__file__))
init_gdb = os.path.join(src_dir, 'init.gdb')
trace_script = os.path.join(src_dir, 'trace_asm.py')
log_dir = os.path.join(src_dir, 'tmp/')

if args.verbose:
    print(f'{args=} {init_gdb=}')

tmp_dir = tempfile.mkdtemp(prefix=log_dir)
try:
    # compile file
    _, src_ext = os.path.splitext(args.src_file)
    if src_ext == '.c':
        cc = 'gcc'
    elif src_ext == '.cpp':
        cc = 'g++'
    else:
        raise NotImplementedError(f'source file extension {src_ext}')

    tmp_file = os.path.join(tmp_dir, 'main' + src_ext)
    tmp_file = shutil.copyfile(args.src_file, tmp_file)
    tmp_path, _ = os.path.splitext(tmp_file)
    compile_cmd_args = [
        cc, '-g',
        tmp_file,
        '-o', tmp_path
    ]
    if args.verbose:
        print(f'{compile_cmd_args=}')
    compile_output = subprocess.check_output(
        compile_cmd_args, cwd=tmp_dir, stderr=subprocess.PIPE, encoding='utf-8')
    if not args.verbose:
        print(compile_output)

    # construct and run command
    trace_cmd_args = [
        'gdb', tmp_path,
        '-batch', '-nh',
    ]
    trace_cmd_args += [
        '-ex', 'b main',
        '-ex', f'source {trace_script}',
        '-ex', f'r < {args.input_file} > {args.output_file}',
    ]
    if args.log_file is not None:
        trace_cmd_args += [
            '-ex', f'trace-asm {args.log_file}',
        ]
    else:
        trace_cmd_args += [
            '-ex', f'trace-asm',
        ]

    if args.verbose:
        print(f'{" ".join(trace_cmd_args)=}')
    trace_output = subprocess.check_output(
        trace_cmd_args, cwd=tmp_dir, stderr=subprocess.PIPE, encoding='utf-8')
    if args.verbose:
        print(trace_output)
finally:
    if not args.keep_tmp:
        shutil.rmtree(tmp_dir)
